# ==================================================================================================================== #
# Authors:                                                                                                             #
#   Patrick Lehmann                                                                                                    #
#                                                                                                                      #
# ==================================================================================================================== #
# Copyright 2020-2024 The pyTooling Authors                                                                            #
#                                                                                                                      #
# Licensed under the Apache License, Version 2.0 (the "License");                                                      #
# you may not use this file except in compliance with the License.                                                     #
# You may obtain a copy of the License at                                                                              #
#                                                                                                                      #
#   http://www.apache.org/licenses/LICENSE-2.0                                                                         #
#                                                                                                                      #
# Unless required by applicable law or agreed to in writing, software                                                  #
# distributed under the License is distributed on an "AS IS" BASIS,                                                    #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                             #
# See the License for the specific language governing permissions and                                                  #
# limitations under the License.                                                                                       #
#                                                                                                                      #
# SPDX-License-Identifier: Apache-2.0                                                                                  #
# ==================================================================================================================== #
name: Extract Configuration

on:
  workflow_call:
    inputs:
      ubuntu_image_version:
        description: 'Ubuntu image version.'
        required: false
        default: '24.04'
        type: string
      python_version:
        description: 'Python version.'
        required: false
        default: '3.12'
        type: string
      coverage_config:
        description: 'Path to the .coveragerc file. Use pyproject.toml by default.'
        required: false
        default: 'pyproject.toml'
        type: string

    outputs:
      coverage_report_html_directory:
        description: ""
        value: ${{ jobs.Extract.outputs.coverage_report_html_directory }}
      coverage_report_xml_directory:
        description: ""
        value: ${{ jobs.Extract.outputs.coverage_report_xml_directory }}
      coverage_report_xml:
        description: ""
        value: ${{ jobs.Extract.outputs.coverage_report_xml }}
      coverage_report_json_directory:
        description: ""
        value: ${{ jobs.Extract.outputs.coverage_report_json_directory }}
      coverage_report_json:
        description: ""
        value: ${{ jobs.Extract.outputs.coverage_report_json }}

jobs:
  Extract:
    name: 📓 Extract configurations from pyproject.toml
    runs-on: "ubuntu-${{ inputs.ubuntu_image_version }}"
    outputs:
      coverage_report_html_directory: ${{ steps.getVariables.outputs.coverage_report_html_directory }}
      coverage_report_xml_directory:  ${{ steps.getVariables.outputs.coverage_report_xml_directory }}
      coverage_report_xml:            ${{ steps.getVariables.outputs.coverage_report_xml }}
      coverage_report_json_directory: ${{ steps.getVariables.outputs.coverage_report_json_directory }}
      coverage_report_json:           ${{ steps.getVariables.outputs.coverage_report_json }}

    steps:
      - name: ⏬ Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Setup Python ${{ inputs.python_version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}

      - name: 🔧 Install wheel,tomli and pip dependencies (native)
        run: |
          python -m pip install --disable-pip-version-check -U wheel tomli

      - name: 🔁 Extract configurations from pyproject.toml
        id: getVariables
        shell: python
        run: |
          from os       import getenv
          from pathlib  import Path
          from sys      import version
          from textwrap import dedent

          print(f"Python: {version}")

          from tomli import load as tomli_load

          htmlDirectory = Path("htmlcov")
          xmlFile =  Path("./coverage.xml")
          jsonFile = Path("./coverage.json")
          coverageRC = "${{ inputs.coverage_config }}".strip()

          # Read output paths from 'pyproject.toml' file
          if coverageRC == "pyproject.toml":
            pyProjectFile =  Path("pyproject.toml")
            if pyProjectFile.exists():
              with pyProjectFile.open("rb") as file:
                pyProjectSettings = tomli_load(file)

              htmlDirectory = Path(pyProjectSettings["tool"]["coverage"]["html"]["directory"])
              xmlFile       = Path(pyProjectSettings["tool"]["coverage"]["xml"]["output"])
              jsonFile      = Path(pyProjectSettings["tool"]["coverage"]["json"]["output"])
            else:
              print(f"File '{pyProjectFile}' not found.")
              print(f"::error title=FileNotFoundError::File '{pyProjectFile}' not found.")
              exit(1)

          # Read output paths from '.coveragerc' file
          elif len(coverageRC) > 0:
            coverageRCFile = Path(coverageRC)
            if coverageRCFile.exists():
              with coverageRCFile.open("rb") as file:
                coverageRCSettings = tomli_load(file)

              htmlDirectory = Path(coverageRCSettings["html"]["directory"])
              xmlFile       = Path(coverageRCSettings["xml"]["output"])
              jsonFile      = Path(coverageRCSettings["json"]["output"])
            else:
              print(f"File '{coverageRCFile}' not found.")
              print(f"::error title=FileNotFoundError::File '{coverageRCFile}' not found.")
              exit(1)

          # Write jobs to special file
          github_output = Path(getenv("GITHUB_OUTPUT"))
          print(f"GITHUB_OUTPUT: {github_output}")
          with github_output.open("a+", encoding="utf-8") as f:
            f.write(dedent(f"""\
              coverage_report_html_directory={htmlDirectory.as_posix()}
              coverage_report_xml_directory={xmlFile.parent.as_posix()}
              coverage_report_xml={xmlFile.as_posix()}
              coverage_report_json_directory={jsonFile.parent.as_posix()}
              coverage_report_json={jsonFile.as_posix()}
            """))

          print(f"DEBUG:\n  html={htmlDirectory}\n  xml={xmlFile}\n  json={jsonFile}")
