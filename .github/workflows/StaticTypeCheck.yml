# ==================================================================================================================== #
# Authors:                                                                                                             #
#   Patrick Lehmann                                                                                                    #
#   Unai Martinez-Corral                                                                                               #
#                                                                                                                      #
# ==================================================================================================================== #
# Copyright 2020-2025 The pyTooling Authors                                                                            #
#                                                                                                                      #
# Licensed under the Apache License, Version 2.0 (the "License");                                                      #
# you may not use this file except in compliance with the License.                                                     #
# You may obtain a copy of the License at                                                                              #
#                                                                                                                      #
#   http://www.apache.org/licenses/LICENSE-2.0                                                                         #
#                                                                                                                      #
# Unless required by applicable law or agreed to in writing, software                                                  #
# distributed under the License is distributed on an "AS IS" BASIS,                                                    #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                             #
# See the License for the specific language governing permissions and                                                  #
# limitations under the License.                                                                                       #
#                                                                                                                      #
# SPDX-License-Identifier: Apache-2.0                                                                                  #
# ==================================================================================================================== #
name: Static Type Check

on:
  workflow_call:
    inputs:
      ubuntu_image_version:
        description: 'Ubuntu image version.'
        required: false
        default: '24.04'
        type: string
      python_version:
        description: 'Python version.'
        required: false
        default: '3.14'
        type: string
      requirements:
        description: 'Python dependencies to be installed through pip.'
        required: false
        default: '-r tests/requirements.txt'
        type: string
      mypy_options:
        description: 'Additional mypy options.'
        required: false
        default: ''
        type: string
      cobertura_report:
        description: 'Cobertura file to upload as an artifact.'
        required: false
        default: >-
          { "fullpath": "report/typing/cobertura.xml",
            "directory": "report/typing",
            "filename": "cobertura.xml"
          }
        type: string
      junit_report:
        description: 'JUnit file to upload as an artifact.'
        required: false
        default: >-
          { "fullpath": "report/typing/StaticTypingSummary.xml",
            "directory": "report/typing",
            "filename": "StaticTypingSummary.xml"
          }
        type: string
      html_report:
        description: 'Directory to upload as an artifact.'
        required: false
        default: >-
          { "directory": "report/typing/html"
          }
#          "fullpath": "report/typing/html",
        type: string
      cobertura_artifact:
        description: 'Name of the typing cobertura artifact (Cobertura XML).'
        required: false
        default: ''
        type: string
      junit_artifact:
        description: 'Name of the typing junit artifact (JUnit XML).'
        required: false
        default: ''
        type: string
      html_artifact:
        description: 'Name of the typing artifact (HTML report).'
        required: false
        default: ''
        type: string

jobs:
  StaticTypeCheck:
    name: üëÄ Check Static Typing using Python ${{ inputs.python_version }}
    runs-on: "ubuntu-${{ inputs.ubuntu_image_version }}"

    steps:
      - name: ‚è¨ Checkout repository
        uses: actions/checkout@v5

      - name: üêç Setup Python ${{ inputs.python_version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ inputs.python_version }}

      - name: üóÇ Install dependencies
        run: python -m pip install --disable-pip-version-check ${{ inputs.requirements }}

      - name: Check Static Typing
        continue-on-error: true
        run: mypy ${{ inputs.mypy_options }}

      - name: Debug output directories
        continue-on-error: true
        run: |
          # List directory contents
          set +e

          ANSI_LIGHT_RED=$'\x1b[91m'
          ANSI_LIGHT_GREEN=$'\x1b[92m'
          ANSI_LIGHT_YELLOW=$'\x1b[93m'
          ANSI_LIGHT_BLUE=$'\x1b[94m'
          ANSI_NOCOLOR=$'\x1b[0m'

          if [[ "${{ fromJson(inputs.html_report).directory }}" != "" ]]; then
            printf "::group::${ANSI_LIGHT_BLUE}%s${ANSI_NOCOLOR}\n" "Content of '${{ fromJson(inputs.html_report).directory }}' ..."
            tree ${{ fromJson(inputs.html_report).directory }}
            printf "::endgroup::\n"
          fi

          if [[ "${{ fromJson(inputs.junit_report).directory }}" != "" ]]; then
            printf "::group::${ANSI_LIGHT_BLUE}%s${ANSI_NOCOLOR}\n" "Content of '${{ fromJson(inputs.junit_report).directory }}' ..."
            tree ${{ fromJson(inputs.junit_report).directory }}
            printf "::endgroup::\n"
            if [[ "${{ fromJson(inputs.cobertura_report).directory }}" != "" && "${{ fromJson(inputs.junit_report).directory }}" != "${{ fromJson(inputs.cobertura_report).directory }}" ]]; then
              printf "::group::${ANSI_LIGHT_BLUE}%s${ANSI_NOCOLOR}\n" "Content of '${{ fromJson(inputs.cobertura_report).directory }}' ..."
              tree ${{ fromJson(inputs.cobertura_report).directory }}
              printf "::endgroup::\n"
            fi
          elif [[ "${{ fromJson(inputs.cobertura_report).directory }}" != "" ]]; then
            printf "::group::${ANSI_LIGHT_BLUE}%s${ANSI_NOCOLOR}\n" "Content of '${{ fromJson(inputs.cobertura_report).directory }}' ..."
            tree ${{ fromJson(inputs.cobertura_report).directory }}
            printf "::endgroup::\n"
          fi

      - name: üì§ Upload '${{ inputs.html_artifact }}' HTML artifact
        uses: pyTooling/upload-artifact@v4
        if: ${{ inputs.html_artifact != '' }}
        continue-on-error: true
        with:
          name: ${{ inputs.html_artifact }}
          working-directory: ${{ fromJson(inputs.html_report).directory }}
          path: '*'
          if-no-files-found: error
          retention-days: 1

      - name: üì§ Upload '${{ inputs.junit_artifact }}' JUnit artifact
        uses: pyTooling/upload-artifact@v4
        if: ${{ inputs.junit_artifact != '' }}
        continue-on-error: true
        with:
          name: ${{ inputs.junit_artifact }}
          working-directory: ${{ fromJson(inputs.junit_report).directory }}
          path: ${{ fromJson(inputs.junit_report).filename }}
          if-no-files-found: error
          retention-days: 1

      - name: üì§ Upload '${{ inputs.cobertura_artifact }}' Cobertura artifact
        uses: pyTooling/upload-artifact@v4
        if: ${{ inputs.cobertura_artifact != '' }}
        continue-on-error: true
        with:
          name: ${{ inputs.cobertura_artifact }}
          working-directory: ${{ fromJson(inputs.cobertura_report).directory }}
          path: ${{ fromJson(inputs.cobertura_report).filename }}
          if-no-files-found: error
          retention-days: 1
