# ==================================================================================================================== #
# Authors:                                                                                                             #
#   Patrick Lehmann                                                                                                    #
#                                                                                                                      #
# ==================================================================================================================== #
# Copyright 2020-2025 The pyTooling Authors                                                                            #
#                                                                                                                      #
# Licensed under the Apache License, Version 2.0 (the "License");                                                      #
# you may not use this file except in compliance with the License.                                                     #
# You may obtain a copy of the License at                                                                              #
#                                                                                                                      #
#   http://www.apache.org/licenses/LICENSE-2.0                                                                         #
#                                                                                                                      #
# Unless required by applicable law or agreed to in writing, software                                                  #
# distributed under the License is distributed on an "AS IS" BASIS,                                                    #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                             #
# See the License for the specific language governing permissions and                                                  #
# limitations under the License.                                                                                       #
#                                                                                                                      #
# SPDX-License-Identifier: Apache-2.0                                                                                  #
# ==================================================================================================================== #
name: Documentation

on:
  workflow_call:
    inputs:
      ubuntu_image_version:
        description: 'Ubuntu image version.'
        required: false
        default: '24.04'
        type: string
      python_version:
        description: 'Python version.'
        required: false
        default: '3.13'
        type: string
      requirements:
        description: 'Python dependencies to be installed through pip.'
        required: false
        default: '-r doc/requirements.txt'
        type: string
      doc_directory:
        description: 'Path to the directory containing documentation (Sphinx working directory).'
        required: false
        default: 'doc'
        type: string
      coverage_report_json_directory:
        description: ''
        required: false
        type: string
      coverage_json_artifact:
        description: 'Name of the coverage JSON artifact.'
        required: false
        default: ''
        type: string
      unittest_xml_artifact:
        description: 'Name of the unittest XML artifact.'
        required: false
        default: ''
        type: string
      unittest_xml_directory:
        description: 'Directory where unittest XML artifact is extracted.'
        required: false
        default: 'report/unit'
        type: string
      html_artifact:
        description: 'Name of the HTML documentation artifact.'
        required: false
        default: ''
        type: string
      latex_artifact:
        description: 'Name of the LaTeX documentation artifact.'
        required: false
        default: ''
        type: string

jobs:
  Sphinx-HTML:
    name: üìì HTML Documentation using Sphinx and Python ${{ inputs.python_version }}
    runs-on: "ubuntu-${{ inputs.ubuntu_image_version }}"

    steps:
      - name: ‚è¨ Checkout repository
        uses: actions/checkout@v5
        with:
          lfs: true
          submodules: true

      - name: üîß Install graphviz
        run: sudo apt-get install -y --no-install-recommends graphviz

      - name: üêç Setup Python ${{ inputs.python_version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}

      - name: üîß Install wheel,tomli and pip dependencies (native)
        run: |
          python -m pip install --disable-pip-version-check -U wheel
          python -m pip install --disable-pip-version-check ${{ inputs.requirements }}

      - name: üì• Download artifacts '${{ inputs.unittest_xml_artifact }}' from 'Unittesting' job
        uses: pyTooling/download-artifact@v4
        if: inputs.unittest_xml_artifact != ''
        with:
          name: ${{ inputs.unittest_xml_artifact }}
          path: ${{ inputs.unittest_xml_directory }}
          investigate: true

      - name: üì• Download artifacts '${{ inputs.coverage_json_artifact }}' from 'PublishCoverageResults' job
        uses: pyTooling/download-artifact@v4
        if: inputs.coverage_json_artifact != ''
        with:
          name: ${{ inputs.coverage_json_artifact }}
          path: ${{ inputs.coverage_report_json_directory }}
          investigate: true

      - name: ‚òë Generate HTML documentation
        if: inputs.html_artifact != ''
        run: |
          export PYTHONPATH=$(pwd)

          cd "${{ inputs.doc_directory || '.' }}"
          sphinx-build -v -n -b html -d _build/doctrees -j $(nproc) -w _build/html.log . _build/html

      - name: üì§ Upload 'HTML Documentation' artifact
        uses: pyTooling/upload-artifact@v4
        if: inputs.html_artifact != ''
        continue-on-error: true
        with:
          name: ${{ inputs.html_artifact }}
          working-directory: ${{ inputs.doc_directory }}/_build/html
          path: '*'
          if-no-files-found: error
          retention-days: 1

  Sphinx-LaTeX:
    name: üìì LaTeX Documentation using Sphinx and Python ${{ inputs.python_version }}
    runs-on: "ubuntu-${{ inputs.ubuntu_image_version }}"

    steps:
      - name: ‚è¨ Checkout repository
        uses: actions/checkout@v5
        with:
          lfs: true
          submodules: true

      - name: üîß Install graphviz
        run: sudo apt-get install -y --no-install-recommends graphviz

      - name: üêç Setup Python ${{ inputs.python_version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}

      - name: üîß Install wheel,tomli and pip dependencies (native)
        run: |
          python -m pip install --disable-pip-version-check -U wheel
          python -m pip install --disable-pip-version-check ${{ inputs.requirements }}

      - name: üì• Download artifacts '${{ inputs.unittest_xml_artifact }}' from 'Unittesting' job
        uses: pyTooling/download-artifact@v4
        if: inputs.unittest_xml_artifact != ''
        with:
          name: ${{ inputs.unittest_xml_artifact }}
          path: ${{ inputs.unittest_xml_directory }}
          investigate: true

      - name: üì• Download artifacts '${{ inputs.coverage_json_artifact }}' from 'PublishCoverageResults' job
        uses: pyTooling/download-artifact@v4
        if: inputs.coverage_json_artifact != ''
        with:
          name: ${{ inputs.coverage_json_artifact }}
          path: ${{ inputs.coverage_report_json_directory }}
          investigate: true

      - name: ‚òë Generate LaTeX documentation
        if: inputs.latex_artifact != ''
#        continue-on-error: true
        run: |
          export PYTHONPATH=$(pwd)

          cd "${{ inputs.doc_directory || '.' }}"
          sphinx-build -v -n -b latex -d _build/doctrees -j $(nproc) -w _build/latex.log . _build/latex
#           --builder html --doctree-dir _build/doctrees --verbose --fresh-env --write-all --nitpicky --warning-file _build/html.log . _build/html

      - name: Workaround I - https://github.com/sphinx-doc/sphinx/issues/13190
        if: inputs.latex_artifact != ''
        run: |
          printf "Changing directory to '${{ inputs.doc_directory || '.' }}/_build/latex' ...\n"
          cd ${{ inputs.doc_directory || '.' }}/_build/latex

          MIMETYPE_EXTENSIONS=(
            "image/png:png"
            "image/jpeg:jpg"
            "image/svg+xml:svg"
          )

          printf "Changing file extension according to MIME type ...\n"
          while IFS=$'\n' read -r file; do
            printf "  Checking '%s' ... " "${file}"
            mime="$(file --mime-type -b "${file}")"
            printf "[%s]\n" "${mime}"

            found=0
            for MIME in "${MIMETYPE_EXTENSIONS[@]}"; do
              mimetype="${MIME%%:*}"
              extension="${MIME#*:}"

              if [[ "${mime}" == "${mimetype}" && "${file##*.}" != "${extension}" ]]; then
                printf "    Rename file to '%s' " "${file}.${extension}"
                mv "${file}" "${file}.${extension}"
                if [[ $? -eq 0 ]]; then
                  printf "[OK]\n"
                else
                  printf "[FAILED]\n"
                fi

                printf "    Patching LaTeX file for '%s' " "${file}"
                sed -i "s:{{${file%.*}}\.${file##*.}}:{{${file}}.${extension}}:g" *.tex
                if [[ $? -eq 0 ]]; then
                  printf "[OK]\n"
                else
                  printf "[FAILED]\n"
                fi

                found=1
                break
              fi
            done
            if [[ $found -eq 0 ]]; then
              printf "[SKIPPED]\n"
            fi
          done < <(find . -type f -not -iname "*.cls" -not -iname "*.sty" -not -iname "*.xdy" -not -iname "*.svg" -not -iname "*.png" -not -iname "*.jpg" | sed 's:./::')

      - name: Workaround II - https://github.com/sphinx-doc/sphinx/issues/13189
        if: inputs.latex_artifact != ''
        run: |
          printf "Changing directory to '${{ inputs.doc_directory || '.' }}/_build/latex' ...\n"
          cd ${{ inputs.doc_directory || '.' }}/_build/latex

          printf "Searching for downloaded images, that need normalization ...\n"
          for imageExt in png svg jpg jpeg; do
            printf "  Processing '%s' ...\n" "${imageExt}"
            while IFS=$'\n' read -r imageFile; do
              newFile="${imageFile//%/_}";

              printf "    %s\n" "$imageFile";
              if [[ "${imageFile}" != "${newFile}" ]]; then
                printf "      Rename file to '%s' " "${newFile}"
                mv "${imageFile}" "${newFile}"
                if [[ $? -eq 0 ]]; then
                  printf "[OK]\n"
                else
                  printf "[FAILED]\n"
                fi

                printf "      Patching LaTeX file for '%s' " "${newFile}"
                sed -i "s:{{${imageFile%.*}}\.${imageFile##*.}}:{{${newFile%.*}}.${newFile##*.}}:g" *.tex
                if [[ $? -eq 0 ]]; then
                  printf "[OK]\n"
                else
                  printf "[FAILED]\n"
                fi
              fi
            done < <(find . -type f -iname "*.$imageExt" | sed 's:./::')
          done

      - name: üì§ Upload 'LaTeX Documentation' artifact
        uses: pyTooling/upload-artifact@v4
        if: inputs.latex_artifact != ''
        continue-on-error: true
        with:
          name: ${{ inputs.latex_artifact }}
          working-directory: ${{ inputs.doc_directory }}/_build/latex
          path: '*'
          if-no-files-found: error
          retention-days: 1
